import type { Preset } from './type'
import { useCodeStore } from '@/stores/code'

export function usePresetList(): Preset {
  return {
    label: '综合演示',
    json: `[{"indexId":"8d77746c-3ff9-4470-9dbd-ee98223c24e3","uuid":"72a70ed5-f1e3-4a93-9fb7-6c9e4e33d19b","componentName":"WidgetLayout","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"slots":{"value":"12:12","slot0":{"key":"slot0","span":"12","children":[{"indexId":"6c08c34e-3711-42f1-9950-ce1c2143994e","uuid":"668b2950-d657-4e5b-9b99-23cd60951b11","componentName":"WidgetButton","libraryName":"generics","focus":false,"eventTriggers":{"click":{"actions":[{"actionName":"JavaScript","uuid":"2c16b98a-e58c-481a-aefd-d34d721a7b5b","config":{"js":"\\n// 这里的代码会在对应动作执行器中的一个匿名函数里执行\\n// 此函数有四个参数，分别是\\n// 1. config 动作执行器的配置参数\\n// 2. libraryComponentInstanceTree 物料组件实例树\\n// 3. libraryComponentSchemaMap 物料组件结构定义的键值对\\n// 4. libraryComponentInstanceRefMap 物料组件实例ref的哈希表\\n\\n// 这里演示一下通过自定义JS，手动控制轮播图上一页\\nconst swipeUUID = \`9fe23dfd-8f53-47fa-9190-a2eb0b8735da\`\\nif (!libraryComponentInstanceRefMap.has(swipeUUID)) console.warn('swipe not found')\\n\\nconst swipeInstance = libraryComponentInstanceRefMap.get(swipeUUID)\\nswipeInstance.swipeRef.prev()","label":"轮播图上一页"}}]}},"props":{"title":"上一页","buttonType":"default","buttonSize":"large","widgetCss":{}}}]},"slot1":{"key":"slot1","span":"12","children":[{"indexId":"6a0b6d54-270f-4adc-9c6b-faac7fc3ac26","uuid":"c9d1a84d-2079-4afb-a4e4-4489b2d22ca9","componentName":"WidgetButton","libraryName":"generics","focus":false,"eventTriggers":{"click":{"actions":[{"actionName":"JavaScript","uuid":"5660b78f-14b3-4a6d-8d8e-39d18129ffeb","config":{"js":"\\n// 这里的代码会在对应动作执行器中的一个匿名函数里执行\\n// 此函数有四个参数，分别是\\n// 1. config 动作执行器的配置参数\\n// 2. libraryComponentInstanceTree 物料组件实例树\\n// 3. libraryComponentSchemaMap 物料组件结构定义的键值对\\n// 4. libraryComponentInstanceRefMap 物料组件实例ref的哈希表\\n\\n// 这里演示一下通过自定义JS，手动控制轮播图上一页\\nconst swipeUUID = \`9fe23dfd-8f53-47fa-9190-a2eb0b8735da\`\\nif (!libraryComponentInstanceRefMap.has(swipeUUID)) console.warn('swipe not found')\\n\\nconst swipeInstance = libraryComponentInstanceRefMap.get(swipeUUID)\\nswipeInstance.swipeRef.next()","label":"轮播图下一页"}}]},"customEventTrigger__56b99752-1010-475a-8dc1-c11fa6bcb07b":{"execCode":"\\n// 这里的代码会在对应组件setup中的一个匿名函数里执行\\n// 本函数有四个参数，分别是\\n// 1. context 一般对应setup的返回值\\n// 2. getCurrentInstance 对应setup中的getCurrentInstance函数实例\\n// 3. CUSTOM_EVENT_EMIT_NAME vue中emit的事件名。常量，目前是\`dispatchEvent\`，vue中emit的事件名\\n// 4. THIS_EMIT_NAME 当前事件触发器的唯一标识符\\n\\n\\nconst instance = getCurrentInstance()\\nconst props = instance.props\\nconst emit = instance.emit\\n\\nfunction injectDispatchClick(count) {\\n  console.log(count)\\n  context.dispatchClick(count)\\n  if (count === 3) {\\n    // 激活其他事件触发器\\n    emit(CUSTOM_EVENT_EMIT_NAME, \`doubleClick\`)\\n  }\\n  else if (count === 4) {\\n    // 激活自身事件触发器\\n    emit(CUSTOM_EVENT_EMIT_NAME, THIS_EMIT_NAME)\\n  }\\n}\\nconst multiClick = context.useMultiClick(injectDispatchClick, 200)\\ncontext.onClick = () => {\\n  multiClick()\\n}","title":"三四击事件","description":"连续快速三次点击触发双击事件，四击触发本事件","actions":[{"actionName":"OpenPage","uuid":"8df584ed-65b3-4e5f-bff1-d0dae0070716","config":{"openMode":"jumpLink","config":{"url":"https://www.baidu.com/s?ie=UTF-8&wd=baidu","blank":true}}}]},"doubleClick":{"actions":[{"actionName":"JavaScript","uuid":"e41ad231-b40f-4f2f-9600-ad61c2eba233","config":{"js":"\\n// 这里的代码会在对应动作执行器中的一个匿名函数里执行\\n// 此函数有四个参数，分别是\\n// 1. config 动作执行器的配置参数\\n// 2. libraryComponentInstanceTree 物料组件实例树\\n// 3. libraryComponentSchemaMap 物料组件结构定义的键值对\\n// 4. libraryComponentInstanceRefMap 物料组件实例ref的哈希表\\n\\n// 这里演示一下通过自定义JS，手动控制轮播图上一页\\nconst swipeUUID = \`9fe23dfd-8f53-47fa-9190-a2eb0b8735da\`\\nif (!libraryComponentInstanceRefMap.has(swipeUUID)) console.warn('swipe not found')\\n\\nconst swipeInstance = libraryComponentInstanceRefMap.get(swipeUUID)\\nswipeInstance.swipeRef.prev()","label":"轮播图上一页"}}]}},"props":{"title":"下一页","buttonType":"default","buttonSize":"large","widgetCss":{}}}]}},"justify":"center","align":"center","widgetCss":{}}},{"indexId":"46da3e33-d090-48b3-8f9b-b9a28fd552bb","uuid":"9fe23dfd-8f53-47fa-9190-a2eb0b8735da","componentName":"WidgetSwipe","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"urlList":["https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-4.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-5.jpeg"],"initialSwipe":"0","autoplay":"0","duration":"500","loop":true,"showIndicators":true,"picWidth":"100%","picHeight":"240","widgetCss":{}}},{"indexId":"77549a14-c145-4e9d-92de-264b11a2e194","uuid":"7af70735-0441-4932-a2b1-def7bc53e891","componentName":"WidgetNoticeBar","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"text":"iPhone 13 正在火热售卖中！","color":"#ed6a0c","background":"#fffbe8","speed":60,"leftIcon":"volume-o","widgetCss":{},"scrollable":true}},{"indexId":"23299ce3-5e1e-4f10-9a38-2f16db3a4489","uuid":"26c49b8e-3356-4452-b359-970c8612990e","componentName":"WidgetCollapse","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"defaultFold":true,"title":"Redmi G 游戏本 2022","content":"16英寸 2.5K 165Hz 电竞大屏 | 可选 GeForce RTX™ 3050 Ti","widgetCss":{}}},{"indexId":"b0b45943-4d96-41ad-9c18-ae5042cf38ad","uuid":"6a3b52a9-4417-4b83-bbd3-deb52a4e29aa","componentName":"WidgetCollapse","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"defaultFold":true,"title":"Xiaomi Book Pro 14 锐龙版","content":"锐龙6000H系列标压处理器 | 2.8K 90Hz OLED屏 | 14.9mm轻薄机身 | CNC一体精雕工艺 | 16G+512G","widgetCss":{}}},{"indexId":"4eb8ee2e-1364-40db-9595-5a0b3e2a05e5","uuid":"16b3cff7-a89f-4a13-971e-c5e08c8ea27b","componentName":"WidgetCollapse","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"defaultFold":true,"title":"RedmiBook Pro 14 2022 锐龙版","content":"可选全新R7 6800H处理器，2.5K 120Hz高清屏，CNC一体精雕工艺","widgetCss":{}}},{"indexId":"7012f16c-52ef-4d55-96d4-24086bce9028","uuid":"c8de9b19-1268-47e1-ba87-9f98e28d25bb","componentName":"WidgetTextbox","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"name":"phone","title":"手机号","type":"tel","placeholder":"请输入您的手机号","widgetCss":{}}},{"indexId":"fcc6b2ce-034c-442c-bf30-bfd817366765","uuid":"5f366c6e-1a9d-4007-a4cf-65c223e3488c","componentName":"WidgetButton","libraryName":"generics","focus":false,"eventTriggers":{"click":{"actions":[{"actionName":"ToastComponent","uuid":"155e116f-7eb2-4bfb-8935-e0b52f19c77d","config":{"content":"预约成功"}}]}},"props":{"title":"立即预约","buttonType":"default","buttonSize":"large","widgetCss":{}}}]`,
    // json: `[{"uuid":"5f95cb22-90fe-4314-a70c-34881149d103","componentName":"WidgetButton","libraryName":"generics","focus":false,"eventTriggers":{"customEventTrigger__1df0bb98-6bb9-4d57-8320-511fbfa48ebf":{"execCode":"\\r\\n// 这里的代码会在对应组件setup中的一个匿名函数里执行\\r\\n// 本函数有四个参数，分别是\\r\\n// 1. context 一般对应setup的返回值\\r\\n// 2. getCurrentInstance 对应setup中的getCurrentInstance函数实例\\r\\n// 3. CUSTOM_EVENT_EMIT_NAME vue中emit的事件名。常量，目前是\`dispatchEvent\`，vue中emit的事件名\\r\\n// 4. THIS_EMIT_NAME 当前事件触发器的唯一标识符\\r\\n\\r\\n\\r\\nconst instance = getCurrentInstance()\\r\\nconst props = instance.props\\r\\nconst emit = instance.emit\\r\\n\\r\\nfunction injectDispatchClick(count) {\\r\\n  console.log(count)\\r\\n  context.dispatchClick(count)\\r\\n  if (count === 3) {\\r\\n    // 激活其他事件触发器\\r\\n    emit(CUSTOM_EVENT_EMIT_NAME, \`doubleClick\`)\\r\\n  }\\r\\n  else if (count === 4) {\\r\\n    // 激活自身事件触发器\\r\\n    emit(CUSTOM_EVENT_EMIT_NAME, THIS_EMIT_NAME)\\r\\n  }\\r\\n}\\r\\nconst multiClick = context.useMultiClick(injectDispatchClick, 200)\\r\\ncontext.onClick = () => {\\r\\n  multiClick()\\r\\n}","title":"三四击事件","description":"连续快速三次点击触发双击事件，四击触发本事件","actions":[{"actionName":"EnableComponent","uuid":"cd686b9d-a500-4913-9268-1811badab8a6","config":{"componentUUID":"5f95cb22-90fe-4314-a70c-34881149d103"}},{"actionName":"ShowComponent","uuid":"56f37050-b58f-481b-8bd2-667f13dee635","config":{"componentUUID":"5f95cb22-90fe-4314-a70c-34881149d103"}},{"actionName":"OpenPage","uuid":"5e3daca9-e626-4d96-b27d-036e7359eb5a","config":{"openMode":"jumpLink","config":{"url":"https://www.baidu.com/s?ie=UTF-8&wd=baidu","blank":true}}}]},"doubleClick":{"actions":[{"actionName":"OpenPage","uuid":"9e2becf8-e423-4dab-84ce-cbd2c49f44e4","config":{"openMode":"jumpLink","config":{"url":"http://127.0.0.1:5173/","blank":true}}}]},"click":{"actions":[{"actionName":"JavaScript","uuid":"7666b759-12ed-42f6-af60-c75f3ee4a193","config":{"js":"\\n// 这里的代码会在对应动作执行器中的一个匿名函数里执行\\n// 此函数有四个参数，分别是\\n// 1. config 动作执行器的配置参数\\n// 2. libraryComponentInstanceTree 物料组件实例树\\n// 3. libraryComponentSchemaMap 物料组件结构定义的键值对\\n// 4. libraryComponentInstanceRefMap 物料组件实例ref的哈希表\\n\\n// 这里演示一下通过自定义JS，手动控制轮播图上一页\\nconst swipeUUID = \`ee92aed9-be44-4933-98f4-d24cbe64b54f\`\\nif (!libraryComponentInstanceRefMap.has(swipeUUID)) console.warn('swipe not found')\\n\\nconst swipeInstance = libraryComponentInstanceRefMap.get(swipeUUID)\\nswipeInstance.swipeRef.prev()","label":"轮播图上一页"}}]}},"props":{"title":"按钮","buttonType":"default","buttonSize":"normal","customEventTrigger":{}},"indexId":"e5eb4e98-92e1-4dbc-ac53-1415ffa2a1f3"},{"indexId":"bbfa3ae8-f11e-4ec2-91ee-65082317a0e7","uuid":"ee92aed9-be44-4933-98f4-d24cbe64b54f","componentName":"WidgetSwipe","libraryName":"generics","focus":false,"eventTriggers":{},"props":{"urlList":["https://fastly.jsdelivr.net/npm/@vant/assets/apple-1.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-2.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-3.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-4.jpeg","https://fastly.jsdelivr.net/npm/@vant/assets/apple-5.jpeg"],"initialSwipe":"0","autoplay":"0","duration":"500","loop":true,"showIndicators":true,"picWidth":"100%","picHeight":"240"}}]`,
  }
}

export default function usePreset() {
  const codeStore = useCodeStore()
  const presetList = reactive<Preset[]>([usePresetList()])
  const choosePreset = ref<string>('')
  function onPresetSelectChange(val: string) {
    if (val === '') return undefined
    const found = presetList.find((e) => e.label === val)!
    if (found.json === '') return undefined
    new Promise(() => {
      codeStore.jsonCode = JSON.parse(found.json)
      ElMessage.success(`已加载: ${found.label}`)
    })
  }

  return {
    presetList,
    choosePreset,
    onPresetSelectChange,
  }
}
